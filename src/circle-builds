#!/usr/bin/env python

from __future__ import print_function
from helpers import circle
from helpers import formatter
from helpers import git
import argparse
import json
import signal
import sys


def signal_handle(sig, frame):
    sys.exit(0)


def _extract_custom_fields(build, fields):
    output = []
    for field in fields:
        parts = field.split(".")
        obj = build
        for part in parts:
            try:
                obj = obj[part]
            except (KeyError, TypeError):
                pretty_string = json.dumps(build, indent=4)
                print("Failed to access '{}' in\n{}"
                      .format(field, pretty_string), file=sys.stderr)
                sys.exit(1)
        output.append(obj or 'null')
    return output


def _format_build(build, fields, include_branch):
    output = []
    output.append(build["build_num"])
    output.append(build["status"])
    output += _extract_custom_fields(build, fields)
    if include_branch:
        output.append(build["branch"])
    name = build["author_name"]
    output.append(name if name else "<unknown>")
    return output


def main(provider, repo, fields, count, branch, show_all):
    response = circle.get_builds(provider, repo, count, branch, show_all)
    if not response:
        print("No builds for {}".format(repo))
        sys.exit(1)

    rows = [_format_build(build, fields, show_all) for build in response]
    print(formatter.output_rows(rows))

signal.signal(signal.SIGINT, signal_handle)
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--fields", nargs="+")
    parser.add_argument("-p", "--provider", default="github")
    parser.add_argument("-r", "--repo", default=git.current_repo_path())
    parser.add_argument("-c", "--count", default=10)

    group = parser.add_mutually_exclusive_group()
    group.add_argument("-a", "--all", action="store_true", default=False)
    group.add_argument("-b", "--branch", default=git.current_branch())

    arguments = parser.parse_args()

    if arguments.repo is None:
        parser.error("Repo is required")

    if not arguments.all and arguments.branch is None:
        parser.error("Either --branch or --all must be specified")

    main(arguments.provider, arguments.repo, arguments.fields or [],
         arguments.count, arguments.branch, arguments.all)
